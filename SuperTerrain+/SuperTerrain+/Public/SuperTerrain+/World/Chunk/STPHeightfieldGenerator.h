#pragma once
#ifndef _STP_HEIGHTFIELD_GENERATOR_H_
#define _STP_HEIGHTFIELD_GENERATOR_H_

#include <SuperTerrain+/STPCoreDefine.h>
#include "../STPWorldMapPixelFormat.hpp"
//Engine
#include "STPDiversityGenerator.hpp"
#include "STPNearestNeighbourTextureBuffer.h"
#include "STPErosionBrush.hpp"
#include "../../Utility/Memory/STPSmartDeviceObject.h"
#include "../../Utility/Memory/STPSmartDeviceMemory.h"
#include "../../Utility/Memory/STPObjectPool.h"
//Settings
#include "../../Environment/STPHeightfieldSetting.h"
#include "../../Environment/STPChunkSetting.h"

//CUDA
#include <curand_kernel.h>
//GLM
#include <glm/vec2.hpp>

namespace SuperTerrainPlus {

	/**
	 * @brief Generate the terrain height map, the height map will be then used to
	 * represent the offset in y direction of the terrain. Heightfield is generated by diversity generator.
	*/
	class STP_API STPHeightfieldGenerator {
	public:

		/**
		 * @brief STPGeneratorSetup contains initialisation parameters for heightfield generator.
		*/
		struct STPGeneratorSetup {
		public:

			//All parameters for the chunk to be linked with this generator.
			const STPEnvironment::STPChunkSetting* ChunkSetting;
			//All parameters for heightfield generation to be linked with this generator.
			const STPEnvironment::STPHeightfieldSetting* HeightfieldSetting;
			//A generator responsible for generating a multi-biome heightmap.
			STPDiversityGenerator* DiversityGenerator;

		};

	private:

		typedef curandStatePhilox4_32_10 STPcurandRNG;

		/**
		 * @brief STPStreamCreator is the default stream creator for the heightfield generator.
		*/
		struct STPStreamCreator {
		public:

			STPSmartDeviceObject::STPStream operator()() const;

		};

		/**
		 * @brief STPRNGCreator allocates memory for the heightfield random number generator.
		*/
		struct STPRNGCreator {
		private:

			const STPSeed_t Seed;
			//The array length of the RNG
			const unsigned int Length;

		public:

			/**
			 * @brief Initialise the RNG creator.
			 * @param heightfield_setting The heightfield setting to be used.
			*/
			STPRNGCreator(const STPEnvironment::STPHeightfieldSetting&);

			STPSmartDeviceMemory::STPDevice<STPcurandRNG[]> operator()(cudaStream_t) const;

		};

		//heightfield generation parameters
		const STPEnvironment::STPHeightfieldSetting HeightfieldSettingHost;
		STPSmartDeviceMemory::STPDevice<STPEnvironment::STPRainDropSetting> RainDropSettingDevice;
		//nearest neighbour information for no neighbour logic, diversity generation and erosion, respectively
		const STPNearestNeighbourInformation NoNeighbour, DiversityNeighbour, ErosionNeighbour;

		//multi-biome heightmap generator linked with external
		STPDiversityGenerator& generateHeightmap;

		//generated erosion brush
		const struct STPErosionBrushMemory {
		public:

			STPSmartDeviceMemory::STPDevice<int[]> Index;
			STPSmartDeviceMemory::STPDevice<float[]> Weight;

			//shallow copy of the erosion brush data so they can be used from the device
			STPErosionBrush ErosionBrushRawData;

		} ErosionBrush;

		//Temp cache on device for heightmap computation
		STPSmartDeviceObject::STPMemPool MapCacheDevice;
		STPObjectPool<STPSmartDeviceObject::STPStream, STPStreamCreator> StreamPool;
		//curand random number generator for erosion, each generator will be dedicated for one thread, i.e., thread independence
		STPObjectPool<STPSmartDeviceMemory::STPDevice<STPcurandRNG[]>, STPRNGCreator> RNGPool;

		//extract the chunk setting out for convenience.
		STPHeightfieldGenerator(const STPGeneratorSetup&, const STPEnvironment::STPChunkSetting&);

	public:

		/**
		 * @brief Initialise the heightfield generator.
		 * @param setup The initialiser for the heightfield generator.
		*/
		STPHeightfieldGenerator(const STPGeneratorSetup&);

		STPHeightfieldGenerator(const STPHeightfieldGenerator&) = delete;

		STPHeightfieldGenerator(STPHeightfieldGenerator&&) = delete;

		STPHeightfieldGenerator& operator=(const STPHeightfieldGenerator&) = delete;

		STPHeightfieldGenerator& operator=(STPHeightfieldGenerator&&) = delete;

		~STPHeightfieldGenerator() = default;

		/**
		 * @brief Generate a multi-biome terrain heightfield.
		 * It will generate a heightfield for a centre chunk, based on biomemap from nearest-neighbour chunks of this centre chunk.
		 * The function will generate a heightmap using application-specified diversity generator.
		 * The generated heightmap will be in range [0.0, 1.0].
		 * The size of heightfield and biomemap should be laid out in row-major order with size no less that settings passed during initialisation.
		 * @param heightfield A float array that will be used to stored heightmap pixels, must be allocated with at least width * height * sizeof(float).
		 * @param biomemap A Sample array (the meaning of sample value is implementation defined) where each biomemap is located.
		 * The number of biomemap must be no less than the expected number of diversity nearest neighbour during initialisation of this generator.
		 * @param offset The x vector specify the offset on x direction of the map and z on y direction of the map.
		 * This is to specify the offset of heightmap in the world coordinate.
		*/
		void generate(STPHeightFloat_t*, const STPSample_t* const*, glm::vec2);

		/**
		 * @brief Perform hydraulic erosion algorithm to erode the rough terrain into a more natural form.
		 * The erosion is done in a *free-slip* manner to ensure rain-drop from the centre chunk can travel beyond the current chunk boundary,
		 * such that a number of neighbour chunks of the centre chunk is required to achieve this.
		 * The number of chunk must be no less than the number of erosion nearest neighbour specified during generator initialisation.
		 * And the array of maps must be arranged in row-major order.
		 * The erosion result will be written back to both the original heightmap in range [0.0, 1.0];
		 * meanwhile, a copy of this heightmap is made and converted to a format that is cheaper (and in a lower quality) for rendering.
		 * @param heightfield_original An array of heightmap which contains all erosion nearest-neighbour chunks around the centre chunk to be eroded.
		 * Erosion happens in-place on this memory.
		 * @param heightfield_low The output of the low quality heightmap, which will be an exact copy of the eroded heightmap.
		*/
		void erode(STPHeightFloat_t* const*, STPHeightFixed_t* const*);

	};

}
#endif//_STP_HEIGHTFIELD_GENERATOR_H_