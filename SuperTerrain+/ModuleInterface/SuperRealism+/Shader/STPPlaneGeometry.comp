#version 460 core
//Allow write to bindless buffer
#extension GL_NV_gpu_shader5 : require

layout(
	local_size_x = 32, 
	local_size_y = 32
) in;

struct TileGeometry{
	vec2 Pos, TexCoord;
};
struct TileElement{
	uint Idx[3];
};

//Output
uniform TileGeometry* TileBuffer;
uniform TileElement* TileIndex;

//Some information about tile plane
uniform uvec2 TotalTile;
uniform dvec2 BaseTilePosition;//The coordinate of the most top-left tile in world position, contains x and z

//2D Index offset of a tile starts from the top-left corner of a tile
const uvec2 PlaneIndexOffset[2][3] = {
	{
		{ 0u, 0u },
		{ 0u, 1u },
		{ 1u, 0u }
	},
	{
		{ 0u, 1u },
		{ 1u, 1u },
		{ 1u, 0u }
	}
};

//Select to generate a different set of plane geometry data.
subroutine void PlaneGeometryGenerator(uvec2);
layout(location = 0) subroutine uniform PlaneGeometryGenerator generatePlane;

void main(){
	//We need to instancing the unit plane and build up chunks
	//Each chunk is again build by multiple unit planes
	//So the number of instance will be chunk_size * number_of_chunk
	//Chunks will be built up from top-left to bottom-right corner
	//Unit planes in each chunk will be again built from top-left to bottom-right

	//All calculations are performed in FP64 and cast to FP32 before writing to output.

	//Calculate the x,y offset of the local unit plane within the chunk we are currently in
	generatePlane(gl_GlobalInvocationID.xy);
}

layout(index = 0) subroutine(PlaneGeometryGenerator) void generateVertex(uvec2 local_offset){
	//during vertex data generation, each thread is responsible for one vertex.
	//N tiles => N + 1 vertices
	const uvec2 TotalVertex = TotalTile + 1u;
	if(local_offset.x >= TotalVertex.x || local_offset.y >= TotalVertex.y){
		return;
	}
	const uint output_index = local_offset.x + local_offset.y * TotalVertex.x;
	TileGeometry* const OutputBuffer = TileBuffer + output_index;

	const dvec2 d_local_offset = dvec2(local_offset),
		local_plane_position = d_local_offset + BaseTilePosition,
		//for uv, we basically normalise the local offset
		local_plane_uv = d_local_offset / dvec2(TotalTile);

	//output to vertex buffer
	//tiles are always at zero altitude, and we can ignore it to save memory
	OutputBuffer->Pos = vec2(local_plane_position);
	OutputBuffer->TexCoord = vec2(local_plane_uv);
}

layout(index = 1) subroutine(PlaneGeometryGenerator) void generateIndex(uvec2 local_offset){
	//during index data generation, each thread is responsible for one face, each tile has 2 faces, so 4 vertices
	//N tiles => 2N faces, by default we count faces in the horizontal direction, so multiply x by 2, and remain y unchanged.
	if(local_offset.x >= TotalTile.x * 2u || local_offset.y >= TotalTile.y){
		return;
	}
	const uint output_index = local_offset.x + local_offset.y * (TotalTile.x * 2u);
	TileElement* const OutputIndex = TileIndex + output_index;

	//we need to determine which face within a tile the current thread is responsible for
	//basically we can do an odd-even test.
	const uint tile_face_index = output_index % 2u,
		row_vertex_count = TotalTile.x + 1u;
	const uvec2 local_face_offset[3] = PlaneIndexOffset[tile_face_index];

	//output to index buffer
	for(int i = 0; i < 3; i++){
		//compute 2D global index offset
		const uvec2 face_index = local_face_offset[i] + uvec2(local_offset.x / 2u, local_offset.y);
		OutputIndex->Idx[i] = face_index.x + face_index.y * row_vertex_count;
	}
}