#pragma once
#ifndef _STP_HEIGHTFIELD_GENERATOR_H_
#define _STP_HEIGHTFIELD_GENERATOR_H_

#include <SuperTerrain+/STPCoreDefine.h>
//System
#include <vector>
//CUDA
#include <curand_kernel.h>

//Engine
#include "STPDiversityGenerator.hpp"
#include "STPErosionBrushGenerator.h"
#include "STPFreeSlipTextureBuffer.h"
#include "../../Utility/Memory/STPSmartDeviceObject.h"
#include "../../Utility/Memory/STPSmartDeviceMemory.h"
#include "../../Utility/Memory/STPObjectPool.h"
//Settings
#include "../../Environment/STPHeightfieldSetting.h"
#include "../../Environment/STPChunkSetting.h"

//GLM
#include <glm/vec2.hpp>

namespace SuperTerrainPlus {

	/**
	 * @brief Generate the terrain height map, the height map will be then used to
	 * represent the offset in y direction of the terrain. Heightfield is generated by diversity generator.
	*/
	class STP_API STPHeightfieldGenerator {
	public:

		//STPGeneratorOperation controls the operations to perform during heightfield generation
		typedef unsigned short STPGeneratorOperation;

		//TODO You can change your preferred RNG here!
		typedef curandStatePhilox4_32_10 STPcurandRNG;

		//Generate a new heightmap and store the result in the provided memory space
		constexpr static STPGeneratorOperation HeightmapGeneration = 1u << 0u;
		//Erode the heightmap. If HeightmapGeneration flag is not enabled, an available heightmap needs to be provided for the operation
		constexpr static STPGeneratorOperation Erosion = 1u << 1u;
		//Generate normal map and integrate into heightfield. If HeightmapGeneration flag is not enabled, an available heightmap needs to be provided for the operation
		//RGB channel will then contain normalmap and A channel contains heightmap
		//Then format the heightfield map from FP32 to INT16.
		constexpr static STPGeneratorOperation RenderingBufferGeneration = 1u << 2u;

		/**
		 * @brief STPMapStorage stores heightfield data for the generator
		*/
		struct STPMapStorage {
		public:

			//- A Sample array (sample is implementation defined, usually it's uint16) where biomemap is located.
			//- the number of biomemap should be the same as that in Heightmap32F when erosion is turned on.
			//We need free-slip biomemap so custom heightmap implementation can do biome-edge interpolation
			//See documentation of Heightmap32F for more details
			//If heightmap generation is not enabled, no biomemap is required
			std::vector<STPDiversity::Sample*> Biomemap;
			//- A float array that will be used to stored heightmap pixels, must be pre-allocated with at least width * height * sizeof(float), i.e., R32F format
			//- If generator is instructed to generate only a single heightmap, only one map is required
			//- If hydraulic erosion and/or normalmap generation is enabled, a list of maps of neighbour chunks are required for edge sync, heightmap generation will 
			//only affect the central chunk, for neighbour chunks it must be precomputed with heightmap to be able to perform free-slip hydraulic erosion,
			//If free-slip hydraulic erosion is disabled, no neighbour chunks are required.
			//- The map pointers should be arranged in row major matrix, with defined neighbour dimension.
			std::vector<float*> Heightmap32F;
			//The x vector specify the offset on x direction of the map and z on y direction of the map.
			//The offset parameter will only be applied on the heightmap generation.
			glm::vec2 HeightmapOffset = glm::vec2(0.0f);
			//A INT16 array that will be used to stored the heightmap and normalmap after formation. The final format will become R16.
			//The number of pointer provided should be the same as the number of heightmap and normalmap.
			std::vector<unsigned short*> Heightfield16UI;

		};

	private:

		/**
		 * @brief STPStreamCreator is the default stream creator for the heightfield generator.
		*/
		struct STPStreamCreator {
		public:

			STPSmartDeviceObject::STPStream operator()() const;

		};

		/**
		 * @brief STPRNGCreator allocates memory for the heightfield random number generator.
		*/
		struct STPRNGCreator {
		private:

			const unsigned long long Seed;
			//The array length of the RNG
			const unsigned int Length;

		public:

			/**
			 * @brief Initialise the RNG creator.
			 * @param heightfield_setting The heightfield setting to be used.
			*/
			STPRNGCreator(const STPEnvironment::STPHeightfieldSetting&);

			STPSmartDeviceMemory::STPDeviceMemory<STPcurandRNG[]> operator()(cudaStream_t) const;

		};

		//multi-biome heightmap generator linked with external
		const STPDiversityGenerator& generateHeightmap;
		//heightfield generation parameters
		const STPEnvironment::STPHeightfieldSetting& HeightfieldSettingHost;
		STPSmartDeviceMemory::STPDeviceMemory<STPEnvironment::STPRainDropSetting> RainDropSettingDevice;

		//generate brush for hydraulic erosion
		const STPErosionBrushGenerator ErosionBrush;

		//free-slip index table generator
		STPFreeSlipTextureAttribute TextureBufferAttr;

		//Temp cache on device for heightmap computation
		mutable STPSmartDeviceObject::STPMemPool MapCacheDevice;
		mutable STPObjectPool<STPSmartDeviceObject::STPStream, STPStreamCreator> StreamPool;
		//curand random number generator for erosion, each generator will be dedicated for one thread, i.e., thread independence
		mutable STPObjectPool<STPSmartDeviceMemory::STPDeviceMemory<STPcurandRNG[]>, STPRNGCreator> RNGPool;

	public:

		/**
		 * @brief Init the heightfield generator
		 * @param chunk_settings All parameters for the chunk to be linked with this generator
		 * @param heightfield_settings All parameters for heightfield generation to be linked with this generator
		 * @param diversity_generator A generator responsible for generating a multi-biome heightmap
		 * @param hint_level_of_concurrency The average number of thread that will be used to issue commands to this class.
		 * It's used to assume the size of memory pool to allocate.
		*/
		STPHeightfieldGenerator(const STPEnvironment::STPChunkSetting&, const STPEnvironment::STPHeightfieldSetting&,
			const STPDiversityGenerator&, unsigned int);

		~STPHeightfieldGenerator() = default;

		STPHeightfieldGenerator(const STPHeightfieldGenerator&) = delete;

		STPHeightfieldGenerator(STPHeightfieldGenerator&&) = delete;

		STPHeightfieldGenerator& operator=(const STPHeightfieldGenerator&) = delete;

		STPHeightfieldGenerator& operator=(STPHeightfieldGenerator&&) = delete;

		/**
		 * @brief Generate the terrain heightfield maps, each heightfield contains four maps, being heightmap and normalmap.
		 * All storage spaces must be preallocated with width * height * sizeof(float), with the exception of normalmap, which requires width * height * sizeof(float) * 4.
		 * The function will first generate our epic height map diversity generator, using the parameter provided during class init.
		 * The generated heightmap will be in range [0,1]
		 * Then performing hydraulic erosion algorithm to erode the rough terrain into a more natural form.
		 * The number of iteration must be set via setErosionIterationCUDA() so pre-computation can be done before launching the program.
		 * Lastly it will generate the normal map for the height map, the normalmap is normalised within the range [0,1].
		 * All four maps are kept in floating point pixel format.
		 * @param args The generator data, see STPMapStorage documentation for more details
		 * @param operation Control what type of operation generator does
		 * @return True if all operations are successful without any errors
		*/
		void operator()(STPMapStorage&, STPGeneratorOperation) const;

	};

}
#endif//_STP_HEIGHTFIELD_GENERATOR_H_